[{"categories":null,"content":"Torrent is one of the fastest ways to share files across internet without having a central distribution point. But the major disadvantage of torrent is that it exposes the public IP of the users to everyone who has access to that torrent file. This is dangerous for a number of reasons. My concern is not about hackers or anything like that. I live in a country where torrent is \u0026ldquo;considered\u0026rdquo; to be illegal. It is not illegal as per law, but we can expect some letters from the ISP if we download any copyrighted stuff from torrent. That is not a big deal for me, as I don\u0026rsquo;t download any pirated movies or anything from torrent. But I still hate the fact that people can easily identify me using public IP when using torrent.\nI could purchase a seedbox and use it to download torrents. But I wanted to try to setup a torrent client through VPN. That\u0026rsquo;s when I came across this: https://github.com/binhex/arch-delugevpn . It is a docker container which has a deluge torrent client (web based) and vpn running alongside it. It also has a kill switch which will stop the torrent when vpn is disconnected. In a previous post Trying out always free ARM VMs in oracle cloud I have explained how I have setup wireguard vpn in oracle ARM VMs using wireguard install script. I\u0026rsquo;m going to use that to setup arch-delugevpn with wireguard in my machine.\nI wrote a docker-compose file from the docker run commands mentioned in the github readme, taking inspiration from this youtube video .\nversion: \u0026#39;3\u0026#39; services: delugevpn: container_name: delugevpn image: binhex/arch-delugevpn:latest restart: unless-stopped sysctls: - net.ipv4.conf.all.src_valid_mark=1 privileged: true ports: - 0.0.0.0:8112:8112 - 58846:58846 - 58946:58946 - 0.0.0.0:8118:8118 environment: - VPN_ENABLED=yes - VPN_PROV=custom - VPN_CLIENT=wireguard - ENABLE_PRIVOXY=yes - LAN_NETWORK=192.168.1.0/24 # Replace with your network\u0026#39;s IP - NAME_SERVERS=1.1.1.1,1.0.0.1 - DELUGE_DAEMON_LOG_LEVEL=info - DELUGE_WEB_LOG_LEVEL=info - DEBUG=false - UMASK=000 - PUID=1000 - PGID=1000 - TZ=Europe/Berlin # Replace with your timezone â€“ check https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for reference volumes: - /home/jayadeep/docker-volumes/deluge-data:/data - ./config:/config - /etc/localtime:/etc/localtime:ro In the volumes section, you can notice that there is a config folder and a data folder. I kept the config folder along with the docker-compose file and data in a separate location. Now all you have to do is copy the wireguard config to the config/wireguard folder and start the container.\ndocker-compose up It will connect the vpn, start deluge client and also expose a proxy on port 8112. You can configure this proxy (localhost:8112) in your applications or browser to route the traffic from specific apps through VPN, while keeping the rest of the apps in the public network.\nMake sure to check for IP leaks before downloading anything from torrent. I used this website https://www.top10vpn.com/tools/do-i-leak/ and https://torguard.net/checkmytorrentipaddress.php to ensure that my public IP is not exposed.\nAnother word of caution: If you are hosting your own vpn, the IP address can be still traced back to you. Copyright owners of pirated content can contact the ISP of the cloud provider and they can terminate your account or take legal actions.\n","permalink":"https://blog.jayadeep.me/posts/3-torrent-vpn-container/","tags":["vpn","homelab","articles"],"title":"Running Torrrent with VPN in a container"},{"categories":null,"content":"I was looking for some cheap cloud providers to provision a simple vm instance. I just wanted to run wireguard and connect my home network to it so that I can access my homelab clusters and personal PC from public internet securely. Previously I used digitalocean and hetzner. They both are cheap, with just 5$ per month for a single core 1GB RAM machine.\nRecently I came across oracle cloud. Oracle provides a few always free resources, which includes 4 ARM cpus with 24GB. Not many people are a fan of ARM machines, But it was perfect for my use case. Actually it is more than enough for me, and completely free for life!\nYou can find more details here: https://docs.oracle.com/en-us/iaas/Content/FreeTier/freetier_topic-Always_Free_Resources.htm Although the console is not as user friendly as compared to other cloud providers, I was able to set it up quickly. One thing which annoyed me the most is that you are not allowed to create resources in every region (for free users). You have to choose a home region and then it is not possible to change it. Then you are stuck with this region forever. So keep that in mind before creating an account.\nRegarding the VM, I have used Ubuntu 20.04 4ARM cpus and 24GB for my machine. It is also possible to create multiple machines as long as the total cpu and memory is under the free tier limit. Another thing I\u0026rsquo;ve noticed is that, the network interface in the VM doesn\u0026rsquo;t show the public IP of the machine. I\u0026rsquo;m no network expert, but my guess is that there is some sort of NAT going on to this machine.\nComing to wireguard, the setup was pretty straightforward. I used the script from https://github.com/angristan/wireguard-install to install the server and setup the client configurations. I didn\u0026rsquo;t expect it work in the first try, as I thought the script was meant for intel only. It worked anyway. But oracle decided to surprise me again. I was unable to connect to the wireguard server from my local machine. I tried editing the security groups, bound a new security group to the instance and still it didn\u0026rsquo;t work. After a bit of search, I found the answer here: https://stackoverflow.com/questions/54794217/opening-port-80-on-oracle-cloud-infrastructure-compute-node . There were some IPTables rules which blocked the ports to wireguard. Since I couldn\u0026rsquo;t make sense of the rules, I just dropped the whole set of rules and it worked.\n","permalink":"https://blog.jayadeep.me/posts/2-oracle-always-free-vm/","tags":["review","cloud","articles"],"title":"Always free ARM VMs in oracle cloud"},{"categories":null,"content":"My personal work setup consists of a Reddragon K552 mechanical keyboard, a Zebronics RGB Mouse and a 2K display. It isn\u0026rsquo;t much, but I love working with it. And that\u0026rsquo;s why I want to reuse the same setup for my office work environment as well. I could buy the same components again and setup another desk, but I prefer a software based approach to tackle this challenge\nSharing Keyboard and Mouse using Barrier Initially I thought of buying a KVM switch. But then I found this gem: https://github.com/debauchee/barrier . Let me show you how to configure barrier to share keyboard and mouse over wifi.\nFirst, make sure your main computer has a static IP. Most likely your router has an option to automatically assign a fixed ip to the computer. Or you can set a static ip in network connection setttings.\nThen install Barrier from the above link. You can find the installation steps for Linux, windows and Mac.\nIn my case, it was easy (I\u0026rsquo;m running Arch linux)\nsudo pacman -S barrier There is one step you need to do to get it to work :- setup ssl certificates. There is a bug in Barrier installation, so barrier doesn\u0026rsquo;t set it up by default, so I had to dig around and find a way to do it. Here is the github issue corresponding to the same: https://github.com/debauchee/barrier/issues/231 In linux:\ncd ~/.local/share/barrier/SSL/ openssl req -x509 -nodes -days 365 -subj /CN=Barrier -newkey rsa:4096 -keyout Barrier.pem -out Barrier.pem In Mac:\ncd /Users/[username]/Library/Application Support/barrier/SSL openssl req -x509 -nodes -days 365 -subj /CN=Barrier -newkey rsa:4096 -keyout Barrier.pem -out Barrier.pem Now open barier in the main machine. On barier settings, enable SSL. It doesn\u0026rsquo;t work without enabling ssl, so I don\u0026rsquo;t know why this option is disabled in the first place.\nThen click on configure server and add a new client. If you know your other machine\u0026rsquo;s hostname, use that as client name. Drag the client to correct position like how you would configure multiple screens.\nOn the client machine (you can have multiple clients), install barrier and setup certificates as above. Make sure the client name there matches the client name configured in the main machine, otherwise it won\u0026rsquo;t connect. Now start the client. The server will ask for verification of the client when it connects for the first time. Then you should be able to move the mouse across both machines. Keyword will work on whichever screen has the mouse active.\nRunning Barrier Barrier is now ready to use. There is one additional step I have done in my case. I have configured a shortcut to bind the devices to one particular machine. When I\u0026rsquo;m working entirely on one machine, I don\u0026rsquo;t want the mouse to accidentally go to other machine and click on something. It can be configured from configure server -\u0026gt; hotkeys\nAdding shortcut Sharing displys across multiple devices. This one is really tricky. I\u0026rsquo;m currently exploring Miraclecast to cast my mac over wifi to Linux machine. I\u0026rsquo;ll update this article if I find a good solution. For now, I\u0026rsquo;m just connecting both devices using multiple cables to the same display and just adjust the source in the monitor whenever I switch to the other device. If you are using windows or mac for both the machines, it might be easier to get it to work.\n","permalink":"https://blog.jayadeep.me/posts/1-keyboard-mouse-share/","tags":["articles"],"title":"Sharing Keyboard and Mouse across multiple devices"},{"categories":null,"content":"","permalink":"https://blog.jayadeep.me/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.jayadeep.me/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.jayadeep.me/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.jayadeep.me/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.jayadeep.me/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.jayadeep.me/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://blog.jayadeep.me/search/_index.zh-cn/","tags":null,"title":""}]